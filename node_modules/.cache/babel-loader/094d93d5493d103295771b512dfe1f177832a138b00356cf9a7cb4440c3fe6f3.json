{"ast":null,"code":"/*import { createServer, Model, Response } from 'miragejs';\n\nexport function makeServer() {\n  let server = createServer({\n    models: {\n      user: Model,\n      activity: Model,\n      booking: Model,\n    },\n    \n    seeds(server) {\n      server.create('user', { \n        id: 5,\n        name: 'Alex',\n        password: 'AlexPassword',\n        role: 'USER',\n        activities: [],\n      });\n      server.create('user', { \n        id: 6,\n        name: 'Anna',\n        password: 'AnnaPassword',\n        role: 'ADMIN',\n        activities: [],\n      });\n      server.create('user', {\n        id: 7,\n        name: 'Roger',\n        password: 'RogerPassword',\n        role: 'USER',\n        activities: [],\n      });\n      \n      server.create('activity', { \n        id: 1,\n        title: 'Boxing',\n        content: 'Boxing in the mud',\n        date: new Date(2023, 5, 20), \n        maxCount: 20,\n      });\n      server.create('activity', { \n        id: 2,\n        title: 'Spinning',\n        content: 'Indoor cycling',\n        date: new Date(2023, 8, 5),\n        maxCount: 7,\n      });\n      server.create('activity', {\n        id: 3, \n        title: 'Gym',\n        content: 'Strength training',\n        date: new Date(2023, 9, 19),\n        maxCount: 2,\n      });\n      server.create('activity', { \n        id: 4,\n        title: 'Aerobics',\n        content: 'Cardio workout',\n        date: new Date(2023, 9, 13),\n        maxCount: 15,\n      });\n    },\n\n    routes() {\n      this.get('/user', (schema, request) => {\n        const { queryParams } = request;\n        const { username, password } = queryParams;\n\n        const user = schema.users.findBy({ name: username, password });\n\n        if (user) {\n          return new Response(200, { 'Content-Type': 'application/json' }, user);\n        } else {\n          return new Response(401, { 'Content-Type': 'application/json' }, { error: 'Invalid credentials' });\n        }\n      });\n\n      this.post('/login', (schema, request) => {\n        const { username, password } = JSON.parse(request.requestBody);\n        const user = schema.db.users.findBy({ name: username, password });\n      \n        if (user) {\n          return new Response(200, { 'Content-Type': 'application/json' }, user);\n        } else {\n          return new Response(401, { 'Content-Type': 'application/json' }, { error: 'Invalid credentials' });\n        }\n      });\n      \n\n      this.get('/activities', (schema) => {\n        return new Response(200, { 'Content-Type': 'application/json' }, schema.db.activities);\n      });\n\n      this.post('/bookings', (schema, request) => {\n        console.log('Received booking request:', request.requestBody);\n        try {\n          const bookingData = JSON.parse(request.requestBody);\n          const booking = schema.bookings.create(bookingData);\n          console.log('Created booking:', booking);\n          return booking;\n        } catch (error) {\n          console.error('Error creating booking:', error);\n          return new Response(500); // Return a 500 status code on error\n        }\n      });\n      // ...\n\nthis.post('/activities', (schema, request) => {\n  const activityData = JSON.parse(request.requestBody);\n  const activity = schema.activities.create(activityData);\n  return activity;\n});\n\n// ...\n\n    },\n  });\n\n  return server;\n}\n*/\n\n/*import { createServer, Model, Response } from 'miragejs';\n\nexport function makeServer() {\n  let server = createServer({\n    models: {\n      user: Model,\n      activity: Model, // Add a model for activities\n      booking: Model,\n    },\n    \n    seeds(server) {\n      console.log(\"Working\");\n      server.create('user', { \n        id: 5,\n        name: 'Alex',\n        password: 'AlexPassword',\n        role: 'USER',\n        activities: [],\n      });\n      server.create('user', { \n        id: 6,\n        name: 'Anna',\n        password: 'AnnaPassword',\n        role: 'ADMIN',\n        activities: [],\n      });\n      server.create('user', {\n        id: 7,\n        name: 'Roger',\n        password: 'RogerPassword',\n        role: 'USER',\n        activities: [],\n      });\n      \n      server.create('activity', { \n        id: 1,\n        title: 'Boxing',\n        content: 'Boxing in the mud',\n        date: new Date(2023, 5, 20), \n        maxCount: 20,\n      });\n      server.create('activity', { \n        id: 2,\n        title: 'Spinning',\n        content: 'Indoor cycling',\n        date: new Date(2023, 8, 5),\n        maxCount: 7,\n      });\n      server.create('activity', {\n        id: 3, \n        title: 'Gym',\n        content: 'Strength training',\n        date: new Date(2023, 9, 19),\n        maxCount: 2,\n      });\n      server.create('activity', { \n        id: 4,\n        title: 'Aerobics',\n        content: 'Cardio workout',\n        date: new Date(2023, 9, 13),\n        maxCount: 15,\n      });\n    },\n\n    routes() {\n      this.get('/user', (schema) => {\n        return new Response(200, { 'Content-Type': 'application/json' }, schema.db.users);\n      });\n\n      this.get('/activities', (schema) => {\n        return new Response(200, { 'Content-Type': 'application/json' }, schema.db.activities);\n      });\n\n      this.post('/bookings', (schema, request) => {\n        console.log('Received booking request:', request.requestBody);\n        try {\n          const bookingData = JSON.parse(request.requestBody);\n          const booking = schema.bookings.create(bookingData);\n          console.log('Created booking:', booking);\n          return booking;\n        } catch (error) {\n          console.error('Error creating booking:', error);\n          return new Response(500); // Return a 500 status code on error\n        }\n      });\n\n      console.log(\"TestTest\");\n    },\n  });\n\n  return server;\n}\n*/\n\n/////TEST 2\n\n// import { createServer, Model, Response, Server, JSONAPISerializer } from 'miragejs';\n\n// export function makeServer(): Server {\n//   let server = createServer({\n//     serializers: {\n//       application: JSONAPISerializer,\n//     },\n\n//     models: {\n//       user: Model,\n//     },\n\n//     seeds(server): void {\n//       console.log(\"Working\");\n//       server.create('user', { name: 'Bob' });\n//       server.create('user', { name: 'Alice' });\n//     },\n\n//     routes(): void {\n//       this.get('/users', (schema): Response => {\n//         console.log(\"TestTest\");\n//         const users = schema.db.users;\n//         return new Response(200, { 'Content-Type': 'application/json' }, { users });\n//       });\n//     },\n//   });\n\n//   return server;\n// }","map":{"version":3,"names":[],"sources":["/Users/annakrifors/Documents/Documents/Anna Kodjobb/Bookingpage/src/server.js"],"sourcesContent":["/*import { createServer, Model, Response } from 'miragejs';\n\nexport function makeServer() {\n  let server = createServer({\n    models: {\n      user: Model,\n      activity: Model,\n      booking: Model,\n    },\n    \n    seeds(server) {\n      server.create('user', { \n        id: 5,\n        name: 'Alex',\n        password: 'AlexPassword',\n        role: 'USER',\n        activities: [],\n      });\n      server.create('user', { \n        id: 6,\n        name: 'Anna',\n        password: 'AnnaPassword',\n        role: 'ADMIN',\n        activities: [],\n      });\n      server.create('user', {\n        id: 7,\n        name: 'Roger',\n        password: 'RogerPassword',\n        role: 'USER',\n        activities: [],\n      });\n      \n      server.create('activity', { \n        id: 1,\n        title: 'Boxing',\n        content: 'Boxing in the mud',\n        date: new Date(2023, 5, 20), \n        maxCount: 20,\n      });\n      server.create('activity', { \n        id: 2,\n        title: 'Spinning',\n        content: 'Indoor cycling',\n        date: new Date(2023, 8, 5),\n        maxCount: 7,\n      });\n      server.create('activity', {\n        id: 3, \n        title: 'Gym',\n        content: 'Strength training',\n        date: new Date(2023, 9, 19),\n        maxCount: 2,\n      });\n      server.create('activity', { \n        id: 4,\n        title: 'Aerobics',\n        content: 'Cardio workout',\n        date: new Date(2023, 9, 13),\n        maxCount: 15,\n      });\n    },\n\n    routes() {\n      this.get('/user', (schema, request) => {\n        const { queryParams } = request;\n        const { username, password } = queryParams;\n\n        const user = schema.users.findBy({ name: username, password });\n\n        if (user) {\n          return new Response(200, { 'Content-Type': 'application/json' }, user);\n        } else {\n          return new Response(401, { 'Content-Type': 'application/json' }, { error: 'Invalid credentials' });\n        }\n      });\n\n      this.post('/login', (schema, request) => {\n        const { username, password } = JSON.parse(request.requestBody);\n        const user = schema.db.users.findBy({ name: username, password });\n      \n        if (user) {\n          return new Response(200, { 'Content-Type': 'application/json' }, user);\n        } else {\n          return new Response(401, { 'Content-Type': 'application/json' }, { error: 'Invalid credentials' });\n        }\n      });\n      \n\n      this.get('/activities', (schema) => {\n        return new Response(200, { 'Content-Type': 'application/json' }, schema.db.activities);\n      });\n\n      this.post('/bookings', (schema, request) => {\n        console.log('Received booking request:', request.requestBody);\n        try {\n          const bookingData = JSON.parse(request.requestBody);\n          const booking = schema.bookings.create(bookingData);\n          console.log('Created booking:', booking);\n          return booking;\n        } catch (error) {\n          console.error('Error creating booking:', error);\n          return new Response(500); // Return a 500 status code on error\n        }\n      });\n      // ...\n\nthis.post('/activities', (schema, request) => {\n  const activityData = JSON.parse(request.requestBody);\n  const activity = schema.activities.create(activityData);\n  return activity;\n});\n\n// ...\n\n    },\n  });\n\n  return server;\n}\n*/\n\n\n\n\n\n\n/*import { createServer, Model, Response } from 'miragejs';\n\nexport function makeServer() {\n  let server = createServer({\n    models: {\n      user: Model,\n      activity: Model, // Add a model for activities\n      booking: Model,\n    },\n    \n    seeds(server) {\n      console.log(\"Working\");\n      server.create('user', { \n        id: 5,\n        name: 'Alex',\n        password: 'AlexPassword',\n        role: 'USER',\n        activities: [],\n      });\n      server.create('user', { \n        id: 6,\n        name: 'Anna',\n        password: 'AnnaPassword',\n        role: 'ADMIN',\n        activities: [],\n      });\n      server.create('user', {\n        id: 7,\n        name: 'Roger',\n        password: 'RogerPassword',\n        role: 'USER',\n        activities: [],\n      });\n      \n      server.create('activity', { \n        id: 1,\n        title: 'Boxing',\n        content: 'Boxing in the mud',\n        date: new Date(2023, 5, 20), \n        maxCount: 20,\n      });\n      server.create('activity', { \n        id: 2,\n        title: 'Spinning',\n        content: 'Indoor cycling',\n        date: new Date(2023, 8, 5),\n        maxCount: 7,\n      });\n      server.create('activity', {\n        id: 3, \n        title: 'Gym',\n        content: 'Strength training',\n        date: new Date(2023, 9, 19),\n        maxCount: 2,\n      });\n      server.create('activity', { \n        id: 4,\n        title: 'Aerobics',\n        content: 'Cardio workout',\n        date: new Date(2023, 9, 13),\n        maxCount: 15,\n      });\n    },\n\n    routes() {\n      this.get('/user', (schema) => {\n        return new Response(200, { 'Content-Type': 'application/json' }, schema.db.users);\n      });\n\n      this.get('/activities', (schema) => {\n        return new Response(200, { 'Content-Type': 'application/json' }, schema.db.activities);\n      });\n\n      this.post('/bookings', (schema, request) => {\n        console.log('Received booking request:', request.requestBody);\n        try {\n          const bookingData = JSON.parse(request.requestBody);\n          const booking = schema.bookings.create(bookingData);\n          console.log('Created booking:', booking);\n          return booking;\n        } catch (error) {\n          console.error('Error creating booking:', error);\n          return new Response(500); // Return a 500 status code on error\n        }\n      });\n\n      console.log(\"TestTest\");\n    },\n  });\n\n  return server;\n}\n*/\n\n\n/////TEST 2\n\n// import { createServer, Model, Response, Server, JSONAPISerializer } from 'miragejs';\n\n// export function makeServer(): Server {\n//   let server = createServer({\n//     serializers: {\n//       application: JSONAPISerializer,\n//     },\n\n//     models: {\n//       user: Model,\n//     },\n    \n//     seeds(server): void {\n//       console.log(\"Working\");\n//       server.create('user', { name: 'Bob' });\n//       server.create('user', { name: 'Alice' });\n//     },\n\n//     routes(): void {\n//       this.get('/users', (schema): Response => {\n//         console.log(\"TestTest\");\n//         const users = schema.db.users;\n//         return new Response(200, { 'Content-Type': 'application/json' }, { users });\n//       });\n//     },\n//   });\n\n//   return server;\n// }\n\n\n\n\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}