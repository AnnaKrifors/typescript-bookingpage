{"ast":null,"code":"import { createServer, Model, Response } from 'miragejs';\nexport function makeServer() {\n  let server = createServer({\n    models: {\n      user: Model,\n      activity: Model,\n      booking: Model,\n      time: Model\n    },\n    seeds(server) {\n      server.create('user', {\n        id: 5,\n        name: 'Alex',\n        password: 'AlexPassword',\n        role: 'USER',\n        activities: []\n      });\n      server.create('user', {\n        id: 6,\n        name: 'Anna',\n        password: 'AnnaPassword',\n        role: 'ADMIN',\n        activities: []\n      });\n      server.create('user', {\n        id: 7,\n        name: 'Roger',\n        password: 'RogerPassword',\n        role: 'USER',\n        activities: [{\n          id: 1,\n          title: 'Boxing',\n          content: 'Boxing in the mud',\n          date: new Date(2023, 5, 20),\n          maxCount: 10\n        }]\n      });\n      server.create('activity', {\n        id: 1,\n        title: 'Boxing',\n        content: 'Boxing in the mud',\n        date: new Date(2023, 9, 7, 14, 0),\n        time: \"12:00\",\n        maxCount: 20\n      });\n      server.create('activity', {\n        id: 2,\n        title: 'Spinning',\n        content: 'Indoor cycling',\n        date: new Date(2023, 8, 5, 12, 30),\n        time: \"14:00\",\n        maxCount: 7\n      });\n      server.create('activity', {\n        id: 3,\n        title: 'Gym',\n        content: 'Strength training',\n        date: new Date(2023, 9, 13),\n        time: \"10:00\",\n        maxCount: 2\n      });\n      server.create('activity', {\n        id: 4,\n        title: 'Aerobics',\n        content: 'Cardio workout',\n        date: new Date(2023, 9, 13),\n        time: \"08:00\",\n        maxCount: 15\n      });\n    },\n    routes() {\n      this.get('/user', (schema, request) => {\n        const {\n          queryParams\n        } = request;\n        const {\n          username,\n          password\n        } = queryParams;\n        const user = schema.users.findBy({\n          name: username,\n          password\n        });\n        if (user) {\n          return new Response(200, {\n            'Content-Type': 'application/json'\n          }, user);\n        } else {\n          return new Response(401, {\n            'Content-Type': 'application/json'\n          }, {\n            error: 'Invalid credentials'\n          });\n        }\n      });\n      this.post('/login', (schema, request) => {\n        const {\n          username,\n          password\n        } = JSON.parse(request.requestBody);\n        const user = schema.db.users.findBy({\n          name: username,\n          password\n        });\n        if (user) {\n          return new Response(200, {\n            'Content-Type': 'application/json'\n          }, user);\n        } else {\n          return new Response(401, {\n            'Content-Type': 'application/json'\n          }, {\n            error: 'Invalid credentials'\n          });\n        }\n      });\n      this.get('/activities', schema => {\n        return new Response(200, {\n          'Content-Type': 'application/json'\n        }, schema.db.activities);\n      });\n      this.post('/bookings', (schema, request) => {\n        console.log('Received booking request:', request.requestBody);\n        try {\n          const bookingData = JSON.parse(request.requestBody);\n          const booking = schema.bookings.create(bookingData);\n          console.log('Created booking:', booking);\n          return booking;\n        } catch (error) {\n          console.error('Error creating booking:', error);\n          return new Response(500); // Return a 500 status code on error\n        }\n      });\n      // ...\n\n      this.post('/activities', (schema, request) => {\n        const activityData = JSON.parse(request.requestBody);\n        const activity = schema.activities.create(activityData);\n        return activity;\n      });\n\n      // ...\n    }\n  });\n\n  return server;\n}","map":{"version":3,"names":["createServer","Model","Response","makeServer","server","models","user","activity","booking","time","seeds","create","id","name","password","role","activities","title","content","date","Date","maxCount","routes","get","schema","request","queryParams","username","users","findBy","error","post","JSON","parse","requestBody","db","console","log","bookingData","bookings","activityData"],"sources":["/Users/annakrifors/Documents/Documents/Anna Kodjobb/Bookingpage/src/server.js"],"sourcesContent":["\n\n\n\nimport { createServer, Model, Response } from 'miragejs';\n\nexport function makeServer() {\n  let server = createServer({\n    models: {\n      user: Model,\n      activity: Model,\n      booking: Model,\n      time:Model,\n    },\n    \n    seeds(server) {\n      server.create('user', { \n        id: 5,\n        name: 'Alex',\n        password: 'AlexPassword',\n        role: 'USER',\n        activities: [],\n      });\n      server.create('user', { \n        id: 6,\n        name: 'Anna',\n        password: 'AnnaPassword',\n        role: 'ADMIN',\n        activities: [ ],\n      });\n      server.create('user', {\n        id: 7,\n        name: 'Roger',\n        password: 'RogerPassword',\n        role: 'USER',\n        activities: [\n          {\n            id: 1,\n            title: 'Boxing',\n            content: 'Boxing in the mud',\n            date: new Date(2023, 5, 20),\n            maxCount: 10,\n          },\n        ],\n      });\n      \n      \n      server.create('activity', { \n        id: 1,\n        title: 'Boxing',\n        content: 'Boxing in the mud',\n        date:new Date(2023, 9, 7, 14, 0),\n        time:\"12:00\", \n        maxCount: 20,\n      });\n      server.create('activity', { \n        id: 2,\n        title: 'Spinning',\n        content: 'Indoor cycling',\n        date: new Date(2023, 8, 5, 12, 30),\n        time:\"14:00\",\n        maxCount: 7,\n      });\n      server.create('activity', {\n        id: 3, \n        title: 'Gym',\n        content: 'Strength training',\n        date: new Date(2023,9,13),\n        time: \"10:00\",\n        maxCount: 2,\n      });\n      server.create('activity', { \n        id: 4,\n        title: 'Aerobics',\n        content: 'Cardio workout',\n        date: new Date(2023, 9, 13),\n        time: \"08:00\",\n        maxCount: 15,\n      });\n    },\n\n    routes() {\n      this.get('/user', (schema, request) => {\n        const { queryParams } = request;\n        const { username, password } = queryParams;\n\n        const user = schema.users.findBy({ name: username, password });\n\n        if (user) {\n          return new Response(200, { 'Content-Type': 'application/json' }, user);\n        } else {\n          return new Response(401, { 'Content-Type': 'application/json' }, { error: 'Invalid credentials' });\n        }\n      });\n\n      this.post('/login', (schema, request) => {\n        const { username, password } = JSON.parse(request.requestBody);\n        const user = schema.db.users.findBy({ name: username, password });\n      \n        if (user) {\n          return new Response(200, { 'Content-Type': 'application/json' }, user);\n        } else {\n          return new Response(401, { 'Content-Type': 'application/json' }, { error: 'Invalid credentials' });\n        }\n      });\n      \n\n      this.get('/activities', (schema) => {\n        return new Response(200, { 'Content-Type': 'application/json' }, schema.db.activities);\n      });\n\n      this.post('/bookings', (schema, request) => {\n        console.log('Received booking request:', request.requestBody);\n        try {\n          const bookingData = JSON.parse(request.requestBody);\n          const booking = schema.bookings.create(bookingData);\n          console.log('Created booking:', booking);\n          return booking;\n        } catch (error) {\n          console.error('Error creating booking:', error);\n          return new Response(500); // Return a 500 status code on error\n        }\n      });\n      // ...\n\nthis.post('/activities', (schema, request) => {\n  const activityData = JSON.parse(request.requestBody);\n  const activity = schema.activities.create(activityData);\n  return activity;\n});\n\n// ...\n\n    },\n  });\n\n  return server;\n}\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}