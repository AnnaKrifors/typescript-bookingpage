{"ast":null,"code":"import { createServer, Model, Factory } from 'miragejs';\nexport function makeServer() {\n  let server = createServer({\n    models: {\n      user: Model,\n      activity: Model,\n      booking: Model\n    },\n    factories: {\n      activity: Factory.extend({\n        title(i) {\n          return `Activity ${i}`;\n        },\n        content(i) {\n          return `Content ${i}`;\n        },\n        date(i) {\n          return new Date(2023, 0, i + 1).toString();\n        },\n        maxCount: 10\n      })\n    },\n    seeds(server) {\n      server.create('user', {\n        id: 5,\n        name: 'Alex',\n        password: 'AlexPassword',\n        role: 'USER',\n        activities: []\n      });\n      server.create('user', {\n        id: 6,\n        name: 'Anna',\n        password: 'AnnaPassword',\n        role: 'ADMIN',\n        activities: []\n      });\n      server.create('user', {\n        id: 7,\n        name: 'Roger',\n        password: 'RogerPassword',\n        role: 'USER',\n        activities: []\n      });\n\n      // Skapa aktiviteter med hj√§lp av factory\n      for (let i = 0; i < 5; i++) {\n        server.create('activity');\n      }\n    },\n    routes() {\n      this.get('/user', (schema, request) => {\n        const {\n          queryParams\n        } = request;\n        const {\n          username,\n          password\n        } = queryParams;\n        const user = schema.users.findBy({\n          name: username,\n          password\n        });\n        if (user) {\n          return user;\n        } else {\n          return new Response(401, {\n            'Content-Type': 'application/json'\n          }, {\n            error: 'Invalid credentials'\n          });\n        }\n      });\n      this.post('/login', (schema, request) => {\n        const {\n          username,\n          password\n        } = JSON.parse(request.requestBody);\n        const user = schema.db.users.findBy({\n          name: username,\n          password\n        });\n        if (user) {\n          return user;\n        } else {\n          return new Response(401, {\n            'Content-Type': 'application/json'\n          }, {\n            error: 'Invalid credentials'\n          });\n        }\n      });\n      this.get('/activities', schema => {\n        return schema.activities.all();\n      });\n      this.post('/bookings', (schema, request) => {\n        console.log('Received booking request:', request.requestBody);\n        try {\n          const bookingData = JSON.parse(request.requestBody);\n          const booking = schema.bookings.create(bookingData);\n          console.log('Created booking:', booking);\n          return booking;\n        } catch (error) {\n          console.error('Error creating booking:', error);\n          return new Response(500); // Return a 500 status code on error\n        }\n      });\n\n      this.post('/activities', (schema, request) => {\n        const activityData = JSON.parse(request.requestBody);\n        const activity = schema.activities.create(activityData);\n        return activity;\n      });\n    }\n  });\n  return server;\n}\n\n/*import { createServer, Model, Response } from 'miragejs';\n\nexport function makeServer() {\n  let server = createServer({\n    models: {\n      user: Model,\n      activity: Model,\n      booking: Model,\n    },\n    \n    seeds(server) {\n      server.create('user', { \n        id: 5,\n        name: 'Alex',\n        password: 'AlexPassword',\n        role: 'USER',\n        activities: [],\n      });\n      server.create('user', { \n        id: 6,\n        name: 'Anna',\n        password: 'AnnaPassword',\n        role: 'ADMIN',\n        activities: [],\n      });\n      server.create('user', {\n        id: 7,\n        name: 'Roger',\n        password: 'RogerPassword',\n        role: 'USER',\n        activities: [],\n      });\n      \n      server.create('activity', { \n        id: 1,\n        title: 'Boxing',\n        content: 'Boxing in the mud',\n        date: new Date(2023, 5, 20), \n        maxCount: 20,\n      });\n      server.create('activity', { \n        id: 2,\n        title: 'Spinning',\n        content: 'Indoor cycling',\n        date: new Date(2023, 8, 5),\n        maxCount: 7,\n      });\n      server.create('activity', {\n        id: 3, \n        title: 'Gym',\n        content: 'Strength training',\n        date: new Date(2023, 9, 19),\n        maxCount: 2,\n      });\n      server.create('activity', { \n        id: 4,\n        title: 'Aerobics',\n        content: 'Cardio workout',\n        date: new Date(2023, 9, 13),\n        maxCount: 15,\n      });\n    },\n\n    routes() {\n      this.get('/user', (schema, request) => {\n        const { queryParams } = request;\n        const { username, password } = queryParams;\n\n        const user = schema.users.findBy({ name: username, password });\n\n        if (user) {\n          return new Response(200, { 'Content-Type': 'application/json' }, user);\n        } else {\n          return new Response(401, { 'Content-Type': 'application/json' }, { error: 'Invalid credentials' });\n        }\n      });\n\n      this.post('/login', (schema, request) => {\n        const { username, password } = JSON.parse(request.requestBody);\n        const user = schema.db.users.findBy({ name: username, password });\n      \n        if (user) {\n          return new Response(200, { 'Content-Type': 'application/json' }, user);\n        } else {\n          return new Response(401, { 'Content-Type': 'application/json' }, { error: 'Invalid credentials' });\n        }\n      });\n      \n\n      this.get('/activities', (schema) => {\n        return new Response(200, { 'Content-Type': 'application/json' }, schema.db.activities);\n      });\n\n      this.post('/bookings', (schema, request) => {\n        console.log('Received booking request:', request.requestBody);\n        try {\n          const bookingData = JSON.parse(request.requestBody);\n          const booking = schema.bookings.create(bookingData);\n          console.log('Created booking:', booking);\n          return booking;\n        } catch (error) {\n          console.error('Error creating booking:', error);\n          return new Response(500); // Return a 500 status code on error\n        }\n      });\n      // ...\n\nthis.post('/activities', (schema, request) => {\n  const activityData = JSON.parse(request.requestBody);\n  const activity = schema.activities.create(activityData);\n  return activity;\n});\n\n// ...\n\n    },\n  });\n\n  return server;\n}\n*/\n\n/*import { createServer, Model, Response } from 'miragejs';\n\nexport function makeServer() {\n  let server = createServer({\n    models: {\n      user: Model,\n      activity: Model, // Add a model for activities\n      booking: Model,\n    },\n    \n    seeds(server) {\n      console.log(\"Working\");\n      server.create('user', { \n        id: 5,\n        name: 'Alex',\n        password: 'AlexPassword',\n        role: 'USER',\n        activities: [],\n      });\n      server.create('user', { \n        id: 6,\n        name: 'Anna',\n        password: 'AnnaPassword',\n        role: 'ADMIN',\n        activities: [],\n      });\n      server.create('user', {\n        id: 7,\n        name: 'Roger',\n        password: 'RogerPassword',\n        role: 'USER',\n        activities: [],\n      });\n      \n      server.create('activity', { \n        id: 1,\n        title: 'Boxing',\n        content: 'Boxing in the mud',\n        date: new Date(2023, 5, 20), \n        maxCount: 20,\n      });\n      server.create('activity', { \n        id: 2,\n        title: 'Spinning',\n        content: 'Indoor cycling',\n        date: new Date(2023, 8, 5),\n        maxCount: 7,\n      });\n      server.create('activity', {\n        id: 3, \n        title: 'Gym',\n        content: 'Strength training',\n        date: new Date(2023, 9, 19),\n        maxCount: 2,\n      });\n      server.create('activity', { \n        id: 4,\n        title: 'Aerobics',\n        content: 'Cardio workout',\n        date: new Date(2023, 9, 13),\n        maxCount: 15,\n      });\n    },\n\n    routes() {\n      this.get('/user', (schema) => {\n        return new Response(200, { 'Content-Type': 'application/json' }, schema.db.users);\n      });\n\n      this.get('/activities', (schema) => {\n        return new Response(200, { 'Content-Type': 'application/json' }, schema.db.activities);\n      });\n\n      this.post('/bookings', (schema, request) => {\n        console.log('Received booking request:', request.requestBody);\n        try {\n          const bookingData = JSON.parse(request.requestBody);\n          const booking = schema.bookings.create(bookingData);\n          console.log('Created booking:', booking);\n          return booking;\n        } catch (error) {\n          console.error('Error creating booking:', error);\n          return new Response(500); // Return a 500 status code on error\n        }\n      });\n\n      console.log(\"TestTest\");\n    },\n  });\n\n  return server;\n}\n*/\n\n/////TEST 2\n\n// import { createServer, Model, Response, Server, JSONAPISerializer } from 'miragejs';\n\n// export function makeServer(): Server {\n//   let server = createServer({\n//     serializers: {\n//       application: JSONAPISerializer,\n//     },\n\n//     models: {\n//       user: Model,\n//     },\n\n//     seeds(server): void {\n//       console.log(\"Working\");\n//       server.create('user', { name: 'Bob' });\n//       server.create('user', { name: 'Alice' });\n//     },\n\n//     routes(): void {\n//       this.get('/users', (schema): Response => {\n//         console.log(\"TestTest\");\n//         const users = schema.db.users;\n//         return new Response(200, { 'Content-Type': 'application/json' }, { users });\n//       });\n//     },\n//   });\n\n//   return server;\n// }","map":{"version":3,"names":["createServer","Model","Factory","makeServer","server","models","user","activity","booking","factories","extend","title","i","content","date","Date","toString","maxCount","seeds","create","id","name","password","role","activities","routes","get","schema","request","queryParams","username","users","findBy","Response","error","post","JSON","parse","requestBody","db","all","console","log","bookingData","bookings","activityData"],"sources":["/Users/annakrifors/Documents/Documents/Anna Kodjobb/Bookingpage/src/server.js"],"sourcesContent":["\nimport { createServer, Model, Factory } from 'miragejs';\n\nexport function makeServer() {\n  let server = createServer({\n    models: {\n      user: Model,\n      activity: Model,\n      booking: Model,\n    },\n    \n    factories: {\n      activity: Factory.extend({\n        title(i) {\n          return `Activity ${i}`;\n        },\n        content(i) {\n          return `Content ${i}`;\n        },\n        date(i) {\n          return new Date(2023, 0, i + 1).toString();\n        },\n        maxCount: 10,\n      }),\n    },\n\n    seeds(server) {\n      server.create('user', { \n        id: 5,\n        name: 'Alex',\n        password: 'AlexPassword',\n        role: 'USER',\n        activities: [],\n      });\n      server.create('user', { \n        id: 6,\n        name: 'Anna',\n        password: 'AnnaPassword',\n        role: 'ADMIN',\n        activities: [],\n      });\n      server.create('user', {\n        id: 7,\n        name: 'Roger',\n        password: 'RogerPassword',\n        role: 'USER',\n        activities: [],\n      });\n\n      // Skapa aktiviteter med hj√§lp av factory\n      for (let i = 0; i < 5; i++) {\n        server.create('activity');\n      }\n    },\n\n    routes() {\n      this.get('/user', (schema, request) => {\n        const { queryParams } = request;\n        const { username, password } = queryParams;\n\n        const user = schema.users.findBy({ name: username, password });\n\n        if (user) {\n          return user;\n        } else {\n          return new Response(401, { 'Content-Type': 'application/json' }, { error: 'Invalid credentials' });\n        }\n      });\n\n      this.post('/login', (schema, request) => {\n        const { username, password } = JSON.parse(request.requestBody);\n        const user = schema.db.users.findBy({ name: username, password });\n      \n        if (user) {\n          return user;\n        } else {\n          return new Response(401, { 'Content-Type': 'application/json' }, { error: 'Invalid credentials' });\n        }\n      });\n\n      this.get('/activities', (schema) => {\n        return schema.activities.all();\n      });\n\n      this.post('/bookings', (schema, request) => {\n        console.log('Received booking request:', request.requestBody);\n        try {\n          const bookingData = JSON.parse(request.requestBody);\n          const booking = schema.bookings.create(bookingData);\n          console.log('Created booking:', booking);\n          return booking;\n        } catch (error) {\n          console.error('Error creating booking:', error);\n          return new Response(500); // Return a 500 status code on error\n        }\n      });\n\n      this.post('/activities', (schema, request) => {\n        const activityData = JSON.parse(request.requestBody);\n        const activity = schema.activities.create(activityData);\n        return activity;\n      });\n    },\n  });\n\n  return server;\n}\n\n\n\n/*import { createServer, Model, Response } from 'miragejs';\n\nexport function makeServer() {\n  let server = createServer({\n    models: {\n      user: Model,\n      activity: Model,\n      booking: Model,\n    },\n    \n    seeds(server) {\n      server.create('user', { \n        id: 5,\n        name: 'Alex',\n        password: 'AlexPassword',\n        role: 'USER',\n        activities: [],\n      });\n      server.create('user', { \n        id: 6,\n        name: 'Anna',\n        password: 'AnnaPassword',\n        role: 'ADMIN',\n        activities: [],\n      });\n      server.create('user', {\n        id: 7,\n        name: 'Roger',\n        password: 'RogerPassword',\n        role: 'USER',\n        activities: [],\n      });\n      \n      server.create('activity', { \n        id: 1,\n        title: 'Boxing',\n        content: 'Boxing in the mud',\n        date: new Date(2023, 5, 20), \n        maxCount: 20,\n      });\n      server.create('activity', { \n        id: 2,\n        title: 'Spinning',\n        content: 'Indoor cycling',\n        date: new Date(2023, 8, 5),\n        maxCount: 7,\n      });\n      server.create('activity', {\n        id: 3, \n        title: 'Gym',\n        content: 'Strength training',\n        date: new Date(2023, 9, 19),\n        maxCount: 2,\n      });\n      server.create('activity', { \n        id: 4,\n        title: 'Aerobics',\n        content: 'Cardio workout',\n        date: new Date(2023, 9, 13),\n        maxCount: 15,\n      });\n    },\n\n    routes() {\n      this.get('/user', (schema, request) => {\n        const { queryParams } = request;\n        const { username, password } = queryParams;\n\n        const user = schema.users.findBy({ name: username, password });\n\n        if (user) {\n          return new Response(200, { 'Content-Type': 'application/json' }, user);\n        } else {\n          return new Response(401, { 'Content-Type': 'application/json' }, { error: 'Invalid credentials' });\n        }\n      });\n\n      this.post('/login', (schema, request) => {\n        const { username, password } = JSON.parse(request.requestBody);\n        const user = schema.db.users.findBy({ name: username, password });\n      \n        if (user) {\n          return new Response(200, { 'Content-Type': 'application/json' }, user);\n        } else {\n          return new Response(401, { 'Content-Type': 'application/json' }, { error: 'Invalid credentials' });\n        }\n      });\n      \n\n      this.get('/activities', (schema) => {\n        return new Response(200, { 'Content-Type': 'application/json' }, schema.db.activities);\n      });\n\n      this.post('/bookings', (schema, request) => {\n        console.log('Received booking request:', request.requestBody);\n        try {\n          const bookingData = JSON.parse(request.requestBody);\n          const booking = schema.bookings.create(bookingData);\n          console.log('Created booking:', booking);\n          return booking;\n        } catch (error) {\n          console.error('Error creating booking:', error);\n          return new Response(500); // Return a 500 status code on error\n        }\n      });\n      // ...\n\nthis.post('/activities', (schema, request) => {\n  const activityData = JSON.parse(request.requestBody);\n  const activity = schema.activities.create(activityData);\n  return activity;\n});\n\n// ...\n\n    },\n  });\n\n  return server;\n}\n*/\n\n\n\n\n\n\n/*import { createServer, Model, Response } from 'miragejs';\n\nexport function makeServer() {\n  let server = createServer({\n    models: {\n      user: Model,\n      activity: Model, // Add a model for activities\n      booking: Model,\n    },\n    \n    seeds(server) {\n      console.log(\"Working\");\n      server.create('user', { \n        id: 5,\n        name: 'Alex',\n        password: 'AlexPassword',\n        role: 'USER',\n        activities: [],\n      });\n      server.create('user', { \n        id: 6,\n        name: 'Anna',\n        password: 'AnnaPassword',\n        role: 'ADMIN',\n        activities: [],\n      });\n      server.create('user', {\n        id: 7,\n        name: 'Roger',\n        password: 'RogerPassword',\n        role: 'USER',\n        activities: [],\n      });\n      \n      server.create('activity', { \n        id: 1,\n        title: 'Boxing',\n        content: 'Boxing in the mud',\n        date: new Date(2023, 5, 20), \n        maxCount: 20,\n      });\n      server.create('activity', { \n        id: 2,\n        title: 'Spinning',\n        content: 'Indoor cycling',\n        date: new Date(2023, 8, 5),\n        maxCount: 7,\n      });\n      server.create('activity', {\n        id: 3, \n        title: 'Gym',\n        content: 'Strength training',\n        date: new Date(2023, 9, 19),\n        maxCount: 2,\n      });\n      server.create('activity', { \n        id: 4,\n        title: 'Aerobics',\n        content: 'Cardio workout',\n        date: new Date(2023, 9, 13),\n        maxCount: 15,\n      });\n    },\n\n    routes() {\n      this.get('/user', (schema) => {\n        return new Response(200, { 'Content-Type': 'application/json' }, schema.db.users);\n      });\n\n      this.get('/activities', (schema) => {\n        return new Response(200, { 'Content-Type': 'application/json' }, schema.db.activities);\n      });\n\n      this.post('/bookings', (schema, request) => {\n        console.log('Received booking request:', request.requestBody);\n        try {\n          const bookingData = JSON.parse(request.requestBody);\n          const booking = schema.bookings.create(bookingData);\n          console.log('Created booking:', booking);\n          return booking;\n        } catch (error) {\n          console.error('Error creating booking:', error);\n          return new Response(500); // Return a 500 status code on error\n        }\n      });\n\n      console.log(\"TestTest\");\n    },\n  });\n\n  return server;\n}\n*/\n\n\n/////TEST 2\n\n// import { createServer, Model, Response, Server, JSONAPISerializer } from 'miragejs';\n\n// export function makeServer(): Server {\n//   let server = createServer({\n//     serializers: {\n//       application: JSONAPISerializer,\n//     },\n\n//     models: {\n//       user: Model,\n//     },\n    \n//     seeds(server): void {\n//       console.log(\"Working\");\n//       server.create('user', { name: 'Bob' });\n//       server.create('user', { name: 'Alice' });\n//     },\n\n//     routes(): void {\n//       this.get('/users', (schema): Response => {\n//         console.log(\"TestTest\");\n//         const users = schema.db.users;\n//         return new Response(200, { 'Content-Type': 'application/json' }, { users });\n//       });\n//     },\n//   });\n\n//   return server;\n// }\n\n\n\n\n"],"mappings":"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},"metadata":{},"sourceType":"module","externalDependencies":[]}