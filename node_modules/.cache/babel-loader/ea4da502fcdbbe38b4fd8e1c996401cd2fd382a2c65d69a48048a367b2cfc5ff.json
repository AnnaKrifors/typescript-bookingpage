{"ast":null,"code":"var _jsxFileName = \"/Users/annakrifors/Documents/Documents/Anna Kodjobb/Bookingpage/src/components/BookingButton.tsx\",\n  _s = $RefreshSig$();\n/*import React from 'react';\nimport axios from 'axios';\nimport { Activity } from '../types/Activity';\nimport { User } from '../types/User';\n\ninterface BookingButtonProps {\n  activity: Activity;\n  updateUserActivities: (activity: Activity) => void;\n  loggedInUser:User\n}\n\nfunction BookingButton({ activity, updateUserActivities, loggedInUser }: BookingButtonProps) {\n  function handleBookActivity() {\n    // Replace with the actual user ID\n    const userId = loggedInUser.id;\n    console.log(activity)\n    // Create a new booking object\n    const booking = {\n      userId: userId,\n      activityId: activity.id,\n      bookedDate: new Date(),\n    };\n\n    // Send the booking information to your backend\n    axios\n      .post('/bookings', booking)\n      .then((response) => {\n        console.log('Booking successful:', response.data);\n        const newActivity = {\n          id: activity.id,\n          title: activity.title,\n          content: activity.content,\n          date: new Date(activity.date),\n          maxCount: activity.maxCount,\n        };\n        // After a successful booking, update the user's activities\n        updateUserActivities(newActivity); // Skicka med aktiviteten som parameter\n      })\n      .catch((error) => {\n        console.error('Error booking activity:', error);\n      });\n  }\n\n  return (\n    <button onClick={handleBookActivity}>Book Activity</button>\n  );\n}\n\nexport default BookingButton;\n*/\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BookingButton({\n  activity,\n  updateUserActivities,\n  loggedInUser\n}) {\n  _s();\n  const [bookingConfirmed, setBookingConfirmed] = useState(false);\n  function showBookingConfirmation() {\n    setBookingConfirmed(true);\n  }\n  function hideBookingConfirmation() {\n    setBookingConfirmed(false);\n  }\n  function handleBookActivity() {\n    // Replace with the actual user ID\n    const userId = loggedInUser.id;\n    console.log(activity);\n    // Create a new booking object\n    const booking = {\n      userId: userId,\n      activityId: activity.id,\n      bookedDate: new Date()\n    };\n    axios.post('/bookings', booking).then(response => {\n      console.log('Booking successful:', response.data);\n      const newActivity = {\n        id: activity.id,\n        title: activity.title,\n        content: activity.content,\n        date: new Date(activity.date),\n        maxCount: activity.maxCount\n      };\n      // After a successful booking, update the user's activities\n      updateUserActivities(newActivity);\n      showBookingConfirmation();\n    }).catch(error => {\n      console.error('Error booking activity:', error);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [bookingConfirmed && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"booking-confirmation\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your booking has been confirmed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: hideBookingConfirmation,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBookActivity,\n      children: \"Book Activity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(BookingButton, \"gsqEVR1yn75OI/vlgTUL4xRd2Tw=\");\n_c = BookingButton;\nexport default BookingButton;\nvar _c;\n$RefreshReg$(_c, \"BookingButton\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","BookingButton","activity","updateUserActivities","loggedInUser","_s","bookingConfirmed","setBookingConfirmed","showBookingConfirmation","hideBookingConfirmation","handleBookActivity","userId","id","console","log","booking","activityId","bookedDate","Date","post","then","response","data","newActivity","title","content","date","maxCount","catch","error","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/annakrifors/Documents/Documents/Anna Kodjobb/Bookingpage/src/components/BookingButton.tsx"],"sourcesContent":["/*import React from 'react';\nimport axios from 'axios';\nimport { Activity } from '../types/Activity';\nimport { User } from '../types/User';\n\ninterface BookingButtonProps {\n  activity: Activity;\n  updateUserActivities: (activity: Activity) => void;\n  loggedInUser:User\n}\n\nfunction BookingButton({ activity, updateUserActivities, loggedInUser }: BookingButtonProps) {\n  function handleBookActivity() {\n    // Replace with the actual user ID\n    const userId = loggedInUser.id;\n    console.log(activity)\n    // Create a new booking object\n    const booking = {\n      userId: userId,\n      activityId: activity.id,\n      bookedDate: new Date(),\n    };\n\n    // Send the booking information to your backend\n    axios\n      .post('/bookings', booking)\n      .then((response) => {\n        console.log('Booking successful:', response.data);\n        const newActivity = {\n          id: activity.id,\n          title: activity.title,\n          content: activity.content,\n          date: new Date(activity.date),\n          maxCount: activity.maxCount,\n        };\n        // After a successful booking, update the user's activities\n        updateUserActivities(newActivity); // Skicka med aktiviteten som parameter\n      })\n      .catch((error) => {\n        console.error('Error booking activity:', error);\n      });\n  }\n\n  return (\n    <button onClick={handleBookActivity}>Book Activity</button>\n  );\n}\n\nexport default BookingButton;\n*/\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Activity } from '../types/Activity';\nimport { User } from '../types/User';\n\ninterface BookingButtonProps {\n  activity: Activity;\n  updateUserActivities: (activity: Activity) => void;\n  loggedInUser: User;\n}\n\nfunction BookingButton({ activity, updateUserActivities, loggedInUser }: BookingButtonProps) {\n  const [bookingConfirmed, setBookingConfirmed] = useState(false);\n\n  function showBookingConfirmation() {\n    setBookingConfirmed(true);\n  }\n\n  function hideBookingConfirmation() {\n    setBookingConfirmed(false);\n  }\n\n  function handleBookActivity() {\n    // Replace with the actual user ID\n    const userId = loggedInUser.id;\n    console.log(activity)\n    // Create a new booking object\n    const booking = {\n      userId: userId,\n      activityId: activity.id,\n      bookedDate: new Date(),\n    };\n\n    axios\n      .post('/bookings', booking)\n      .then((response) => {\n        console.log('Booking successful:', response.data);\n        const newActivity = {\n          id: activity.id,\n          title: activity.title,\n          content: activity.content,\n          date: new Date(activity.date),\n          maxCount: activity.maxCount,\n        };\n        // After a successful booking, update the user's activities\n        updateUserActivities(newActivity);\n        showBookingConfirmation();\n      })\n      .catch((error) => {\n        console.error('Error booking activity:', error);\n      });\n  }\n\n  return (\n    <div>\n      {bookingConfirmed && (\n        <div className=\"booking-confirmation\">\n          <p>Your booking has been confirmed!</p>\n          <button onClick={hideBookingConfirmation}>Close</button>\n        </div>\n      )}\n      <button onClick={handleBookActivity}>Book Activity</button>\n    </div>\n  );\n}\n\nexport default BookingButton;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}